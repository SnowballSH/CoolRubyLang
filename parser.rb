#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require "./lexer.rb"
  require "./nodes.rb"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y.rb/module_eval...', 'grammar.y.rb', 134)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
  
...end grammar.y.rb/module_eval...
##### State transition tables begin ###

racc_action_table = [
    23,    14,    16,    17,    18,    19,    20,    21,    22,    23,
    14,    16,    17,    18,    19,    20,    21,    22,    14,    14,
    26,    47,    37,    38,    35,    36,    13,    76,    15,    26,
    26,    37,    38,    35,    36,    13,    23,    15,    16,    17,
    18,    19,    20,    21,    22,    15,    15,    23,    44,    16,
    17,    18,    19,    20,    21,    22,    26,    73,    37,    38,
    35,    36,    13,    62,    23,    43,    16,    17,    18,    19,
    20,    21,    22,    13,    23,    45,    16,    17,    18,    19,
    20,    21,    22,    26,    41,    37,    38,    35,    36,    23,
    13,    16,    17,    18,    19,    20,    21,    22,    26,    23,
    13,    16,    17,    18,    19,    20,    21,    22,    68,    24,
    26,    66,    37,    38,    23,    13,    16,    17,    18,    19,
    20,    21,    22,    79,    23,    13,    16,    17,    18,    19,
    20,    21,    22,    26,    66,    37,    38,   nil,   nil,    23,
    13,    16,    17,    18,    19,    20,    21,    22,   nil,    23,
    13,    16,    17,    18,    19,    20,    21,    22,    77,    42,
    78,    41,   nil,   nil,    23,    13,    16,    17,    18,    19,
    20,    21,    22,   nil,    23,    13,    16,    17,    18,    19,
    20,    21,    22,    71,   nil,    70,   nil,   nil,   nil,    23,
    13,    16,    17,    18,    19,    20,    21,    22,   nil,    23,
    13,    16,    17,    18,    19,    20,    21,    22,   nil,   nil,
   nil,   nil,   nil,   nil,    23,    13,    16,    17,    18,    19,
    20,    21,    22,   nil,    23,    13,    16,    17,    18,    19,
    20,    21,    22,   nil,   nil,   nil,   nil,   nil,   nil,    23,
    13,    16,    17,    18,    19,    20,    21,    22,   nil,    23,
    13,    16,    17,    18,    19,    20,    21,    22,   nil,   nil,
   nil,   nil,   nil,   nil,    26,    13,    37,    38,    35,    36,
    31,    32,    33,    34,    26,    13,    37,    38,    35,    36,
    31,    32,    33,    34,    29,    30,    28,    27,   nil,   nil,
    26,    60,    37,    38,    35,    36,    31,    32,    33,    34,
    29,    30,    28,    27,    26,   nil,    37,    38,    35,    36,
    31,    32,    33,    34,    29,    30,    28,    27,    26,   nil,
    37,    38,    35,    36,    31,    32,    33,    34,    29,    30,
    28,    27,    26,   nil,    37,    38,    35,    36,    31,    32,
    33,    34,    29,    30,    28,    27,    26,   nil,    37,    38,
    35,    36,    31,    32,    33,    34,    29,    30,    28,    27,
    26,   nil,    37,    38,    35,    36,    31,    32,    33,    34,
    29,    30,    28,    27,    26,   nil,    37,    38,    35,    36,
    31,    32,    33,    34,    29,    30,    28,    26,   nil,    37,
    38,    35,    36,    31,    32,    33,    34,    29,    30,    26,
   nil,    37,    38,    35,    36,    31,    32,    33,    34 ]

racc_action_check = [
    66,    66,    66,    66,    66,    66,    66,    66,    66,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     2,    72,
    52,    26,    52,    52,    52,    52,    66,    72,    66,    53,
    59,    53,    53,    53,    53,     0,    41,     0,    41,    41,
    41,    41,    41,    41,    41,     2,    72,    71,    23,    71,
    71,    71,    71,    71,    71,    71,    54,    68,    54,    54,
    54,    54,    41,    41,    43,    22,    43,    43,    43,    43,
    43,    43,    43,    71,    13,    24,    13,    13,    13,    13,
    13,    13,    13,    55,    47,    55,    55,    55,    55,    42,
    43,    42,    42,    42,    42,    42,    42,    42,    58,    25,
    13,    25,    25,    25,    25,    25,    25,    25,    44,     1,
    56,    44,    56,    56,    38,    42,    38,    38,    38,    38,
    38,    38,    38,    77,    27,    25,    27,    27,    27,    27,
    27,    27,    27,    57,    78,    57,    57,   nil,   nil,    28,
    38,    28,    28,    28,    28,    28,    28,    28,   nil,    29,
    27,    29,    29,    29,    29,    29,    29,    29,    74,    21,
    74,    21,   nil,   nil,    30,    28,    30,    30,    30,    30,
    30,    30,    30,   nil,    31,    29,    31,    31,    31,    31,
    31,    31,    31,    63,   nil,    63,   nil,   nil,   nil,    32,
    30,    32,    32,    32,    32,    32,    32,    32,   nil,    33,
    31,    33,    33,    33,    33,    33,    33,    33,   nil,   nil,
   nil,   nil,   nil,   nil,    34,    32,    34,    34,    34,    34,
    34,    34,    34,   nil,    35,    33,    35,    35,    35,    35,
    35,    35,    35,   nil,   nil,   nil,   nil,   nil,   nil,    36,
    34,    36,    36,    36,    36,    36,    36,    36,   nil,    37,
    35,    37,    37,    37,    37,    37,    37,    37,   nil,   nil,
   nil,   nil,   nil,   nil,    50,    36,    50,    50,    50,    50,
    50,    50,    50,    50,    39,    37,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,    39,    39,   nil,   nil,
    65,    39,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,     3,   nil,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,    75,   nil,
    75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
    75,    75,    61,   nil,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    61,    61,    46,   nil,    46,    46,
    46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
    64,   nil,    64,    64,    64,    64,    64,    64,    64,    64,
    64,    64,    64,    64,    48,   nil,    48,    48,    48,    48,
    48,    48,    48,    48,    48,    48,    48,    49,   nil,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    51,
   nil,    51,    51,    51,    51,    51,    51,    51,    51 ]

racc_action_pointer = [
     7,   109,    15,   292,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    72,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   133,    39,    39,    75,    97,    12,   122,   137,   147,
   162,   172,   187,   197,   212,   222,   237,   247,   112,   262,
   nil,    34,    87,    62,    80,   nil,   334,    56,   362,   375,
   252,   387,     8,    17,    44,    71,    98,   121,    86,    18,
   nil,   320,   nil,   156,   348,   278,    -2,   nil,    48,   nil,
   nil,    45,    16,   nil,   131,   306,   nil,   114,   103,   nil,
   nil ]

racc_action_default = [
    -1,   -52,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -52,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -47,   -45,   -52,   -52,    -5,   -52,   -52,   -52,   -52,
   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,
   -23,   -52,   -52,   -52,   -52,    81,    -4,   -25,   -33,   -34,
   -35,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -15,   -28,   -26,   -52,   -48,   -46,   -52,   -50,   -30,   -24,
   -27,   -52,   -52,   -31,   -52,   -29,   -49,   -52,   -52,   -32,
   -51 ]

racc_goto_table = [
    25,     2,    39,    67,    74,    63,     1,    40,   nil,   nil,
   nil,   nil,   nil,   nil,    46,   nil,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,   nil,   nil,
    61,    64,    65,    69,   nil,   nil,   nil,    80,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    75,   nil,   nil,   nil,   nil,   nil,   nil,    72,   nil,   nil,
    25 ]

racc_goto_check = [
     4,     2,     3,    16,    15,    14,     1,    13,   nil,   nil,
   nil,   nil,   nil,   nil,     3,   nil,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,   nil,   nil,
     3,     3,     3,    13,   nil,   nil,   nil,    16,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
     4 ]

racc_goto_pointer = [
   nil,     6,     1,   -11,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -14,   -36,   -64,   -41 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 33, :_reduce_1,
  1, 33, :_reduce_2,
  1, 34, :_reduce_3,
  3, 34, :_reduce_4,
  2, 34, :_reduce_5,
  1, 34, :_reduce_6,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  3, 35, :_reduce_15,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 37, :_reduce_18,
  1, 37, :_reduce_19,
  1, 37, :_reduce_20,
  1, 37, :_reduce_21,
  1, 37, :_reduce_22,
  2, 38, :_reduce_23,
  4, 38, :_reduce_24,
  3, 38, :_reduce_25,
  2, 45, :_reduce_26,
  3, 45, :_reduce_27,
  1, 46, :_reduce_28,
  3, 46, :_reduce_29,
  0, 47, :_reduce_30,
  1, 47, :_reduce_31,
  3, 47, :_reduce_32,
  3, 39, :_reduce_33,
  3, 39, :_reduce_34,
  3, 39, :_reduce_35,
  3, 39, :_reduce_36,
  3, 39, :_reduce_37,
  3, 39, :_reduce_38,
  3, 39, :_reduce_39,
  3, 39, :_reduce_40,
  3, 39, :_reduce_41,
  3, 39, :_reduce_42,
  3, 39, :_reduce_43,
  3, 39, :_reduce_44,
  1, 40, :_reduce_45,
  3, 41, :_reduce_46,
  1, 42, :_reduce_47,
  3, 43, :_reduce_48,
  3, 48, :_reduce_49,
  3, 44, :_reduce_50,
  6, 44, :_reduce_51 ]

racc_reduce_n = 52

racc_shift_n = 81

racc_token_table = {
  false => 0,
  :error => 1,
  :DEF => 2,
  :NEWLINE => 3,
  :NUMBER => 4,
  :STRING => 5,
  :TRUE => 6,
  :FALSE => 7,
  :NIL => 8,
  :IDENTIFIER => 9,
  :CONSTANT => 10,
  :END => 11,
  "." => 12,
  "!" => 13,
  "*" => 14,
  "/" => 15,
  "+" => 16,
  "-" => 17,
  ">" => 18,
  ">=" => 19,
  "<" => 20,
  "<=" => 21,
  "==" => 22,
  "!=" => 23,
  "&&" => 24,
  "||" => 25,
  "=" => 26,
  "," => 27,
  "(" => 28,
  ")" => 29,
  ";" => 30,
  ":" => 31 }

racc_nt_base = 32

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "DEF",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "END",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "\":\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "GetConstant",
  "SetConstant",
  "GetLocal",
  "SetLocal",
  "Def",
  "Arguments",
  "ArgList",
  "ParamList",
  "Block" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y.rb', 28)
  def _reduce_1(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 29)
  def _reduce_2(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 33)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 34)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 35)
  def _reduce_5(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 36)
  def _reduce_6(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'grammar.y.rb', 48)
  def _reduce_15(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.y.rb', 57)
  def _reduce_18(val, _values, result)
     result = NumberNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 58)
  def _reduce_19(val, _values, result)
     result = StringNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 59)
  def _reduce_20(val, _values, result)
     result = TrueNode.new
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 60)
  def _reduce_21(val, _values, result)
     result = FalseNode.new
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 61)
  def _reduce_22(val, _values, result)
     result = NilNode.new
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 65)
  def _reduce_23(val, _values, result)
     result = CallNode.new(nil, val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 67)
  def _reduce_24(val, _values, result)
     result = CallNode.new(val[0], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 68)
  def _reduce_25(val, _values, result)
     result = CallNode.new(val[0], val[2], [])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 72)
  def _reduce_26(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 73)
  def _reduce_27(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 77)
  def _reduce_28(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 78)
  def _reduce_29(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 82)
  def _reduce_30(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 83)
  def _reduce_31(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 84)
  def _reduce_32(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 88)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 89)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 90)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 91)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 92)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 93)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 94)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 95)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 96)
  def _reduce_41(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 97)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 98)
  def _reduce_43(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 99)
  def _reduce_44(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 103)
  def _reduce_45(val, _values, result)
     result = GetConstantNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 107)
  def _reduce_46(val, _values, result)
     result = SetConstantNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 111)
  def _reduce_47(val, _values, result)
     result = GetLocalNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 115)
  def _reduce_48(val, _values, result)
     result = SetLocalNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 119)
  def _reduce_49(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 123)
  def _reduce_50(val, _values, result)
     result = DefNode.new(val[1], [], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y.rb', 125)
  def _reduce_51(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
